= navGATE

This gem is provided as is, please read through the intializer file "build_menu.rb" for examples on how you can use this gem to build a nav menu.

This gem was built with Rails in mind.

note: this is my first gem, I am still trying to set it up, so be carefull when downloading this.
Also I've included the extra files needed to get it working in there respective directories, eg, the code in 'Applicationhelper' needs to go in 'Applicationhelper'.
I've tried to to make it easy to install but I'm still not sure how to get those things into the right files automaticly, if some one could point me in the right direction, I'd be happy to make the needed changes.
lastly the gem is up on rubygems.org
==Building the menus

When building the menu there are multiple options available, building the menu is done in  an initializer file in the configs directory.

There are several options you can pass through, if you are building the menu with the object builder directly then two options must be present, those being 'selection' and 'controller', the rest are optional.

Also note, you can pass multiple Navgate::builders as you need, just match them to there controllers and they should render properly.
===Options

selection: This is used to build the menu options.
There are two ways to use this, the first is to use an array of strings containing the menu options a person can select; the second is to pull from a database table, to do this pass a hash with the key being the name of the model and it's value being the field containing it's name

default: This is used to give the menu a default selection for when the user has not selected anything. Pass a string containing the name of the defualt selection, if no string is passed then the first item from selection is used.

prefix: This is used when you have a prefix before the target in the url, eg: if your links render out as "host.com/books" without a prefix; with a prefix of 'shelf' it will render out as "host.com/shelf/books". This is not for namespacing, for namespacing see the namespace option.

namespace: This is used for when you have namespacing. It works like prefix however unlike prefix it will also search for the controller within the namespace unlike prefix which doesn't.

controller: This is used to match the menu to a controller, when deciding which menu to render, it matches this attribute to the current controller. If you have namespacing, the 'namespace' options MUST be used before the 'controller' option otherwise it won't recognise the namespace

by_id: This is used when you are using a database model to build the menu and you want to link with IDs rather then the selection list. To use it simply set it to true.

css_class: This is used when you want to hard code the CSS class selector into the menu rather then from the view

examples:

===Building menu object from scratch
The default option doesn't have to be the first in the selection list.
  NAVGATE = Navgate.new do |build|
    build.navs = [ Navgate::Builder.new do |options|
            options[:selection] = %w(selection site_settings users images misc)
            options[:default] = 'users'
            options[:namespace] = 'admin'
            options[:controller] = 'admin_panel'
            options[:css_class] = 'nav button'
          end
    ]
  end

===Building menu object from database fields
Be sure to pass it as {model_name: :field}

  NAVGATE = Navgate.new do |build|
     build.navs = [ Navgate::Builder.new do |options|
                    options[:selection] = {categories: :title }
                    options[:prefix] = 'shop_category'
                    options[:controller] = 'front_page'
                    options[:by_id] = true
                  end
    ]
  end


=== Using a yml file to build the menu
There is also a third option to build the menu, you can use a structured yml file, there is an example yaml file in the config dirrectory called "build_menu.yml".
when using this method you are unable to use a database model to create the menu.

===Building from yaml file,
Initializing the object:
  NAVGATE = Navgate.new do |build|
    build.navs = "#{Rails.root}/config/build_menu.yml"
  end
The yaml file:
  nav_1:
    selection: welcome about_us gallery
    default: welcome
    prefix: main
    namespace: front_end
    controller: front_page
  nav_2:
    selection: settings users misc
    default: settings
    namespace: back_end
    controller: admin_panel



==Rendering the menu

To render the menu use the provided helper "render_navigation(options)"
options is a hash that is used to build any html options you might want such as
class, it can also take two extra options, 'styling:' and 'wrap:'.

===Options

Styling: This is how the navigation can be styled it can either be ':verticle' or a character that you wish to use for spacing such as '|' or ':' and so on, it can only be verticle or a spaceing character.
Wrap: This allows you to wrap each link in a html tag, wrap can itself take two differant options, either a string containing the tag's name (without "<>", only the tag name) or an Array containing the tag name and it's class.

example:
  render_navigation({"class" => "'nav button'",styling: :verticle, wrap: ['li','test']}) %>

note: class has to be in "" due to it being a keyword in ruby.
note: There is no point in passing a class here if you have one set when you first build the menu, it will just be ignored.
